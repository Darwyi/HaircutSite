// <auto-generated />
using System;
using System.Collections.Generic;
using HaircutSite.Presistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HaircutSite.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250423044721_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("HaircutSite.Core.Models.HaircutStyles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Hair Styles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "empty",
                            Name = "Long"
                        },
                        new
                        {
                            Id = 2,
                            Description = "empty",
                            Name = "Short"
                        });
                });

            modelBuilder.Entity("HaircutSite.Core.Models.SignUps", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("HaircutStyleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HaircutStyleId");

                    b.ComplexProperty<Dictionary<string, object>>("User", "HaircutSite.Core.Models.SignUps.User#User", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.HasIndex("HaircutStyleId");

                    b.ToTable("SignUps", (string)null);
                });

            modelBuilder.Entity("HaircutSite.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Created At")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Updated at")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("HaircutSite.Core.Models.SignUps", b =>
                {
                    b.HasOne("HaircutSite.Core.Models.HaircutStyles", "haircutStyle")
                        .WithMany()
                        .HasForeignKey("HaircutStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("haircutStyle");
                });
#pragma warning restore 612, 618
        }
    }
}
